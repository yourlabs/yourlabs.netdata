---

- include_role: name=yourlabs.remember

- name: Create netdata home
  file:
    state: directory
    path: '{{ home }}/netdataconfig'

- name: Copy netdata conf
  shell: 'chdir={{ home }} bash -c "docker run -d --name netdata_tmp netdata/netdata; docker cp netdata_tmp:/etc/netdata netdataconfig/; docker cp netdata_tmp:/etc/netdata netdataconfig/; docker rm -f netdata_tmp"'

- name: Copy netdata compose
  template:
    src: docker-compose.yml
    dest: '{{ home }}/docker-compose.yml'


- name: Configure alarms
  template:
    src: health_alarm_notify.conf
    dest: '{{ home }}/netdataconfig/netdata/health_alarm_notify.conf'
    owner: root
    mode: '0644'

- name: Create netdata network
  docker_network:
    name: netdata

- name: enable & config KSM
  blockinfile:
    path: /etc/tmpfiles.d/ksm.conf
    block: |
      w /sys/kernel/mm/ksm/run - - - - 1
      w /sys/kernel/mm/ksm/sleep_millisecs - - - - 1000
    state: present
    create: true

- name: Start netdata docker-compose.yml
  docker_compose:
    project_src: /home/netdata/
    restarted: no
    pull: yes
    recreate: always

- name: Make prometheus home
  file: name=/home/prometheus state=directory

- name: Copy prometheus configuration
  copy:
    src: files/prometheus.yml
    dest: /home/prometheus/prometheus.yml

- name: Setup prometheus container
  tags: docker
  docker_container:
    hostname: prometheus
    name: prometheus
    image: prom/prometheus
    restart_policy: unless-stopped
    volumes:
    - /home/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    - prometheus-data:/prometheus
    ports:
    - 9090:9090
    networks:
    - name: netdata
    - name: web
    labels:
      traefik.enable: 'true'
      traefik.docker.network: web
      traefik.http.routers.prometheus.entryPoints: web
      traefik.http.routers.prometheus.rule: host(`{{ prometheus_dns }}`)
      #traefik.http.routers.prometheus.middlewares: redirect-to-https
      #traefik.http.middlewares.prometheus.redirectscheme: https
      traefik.http.routers.prometheus-ssl.entryPoints: websecure
      traefik.http.routers.prometheus-ssl.rule: host(`{{ prometheus_dns }}`)
      traefik.http.routers.prometheus-ssl.tls: 'true'
      traefik.http.routers.prometheus-ssl.tls.certResolver: leresolver
      traefik.http.routers.prometheus-ssl.service: prometheus-ssl
      traefik.http.services.prometheus-ssl.loadBalancer.server.port: '9090'
      traefik.http.routers.prometheus-ssl.middlewares: authtraefik

- name: Make grafana home
  file: name=/home/grafana state=directory

- name: Make grafana datasources dir
  file: name=/home/grafana/datasources state=directory

- name: Setup grafana container
  tags: docker
  docker_container:
    name: grafana
    image: grafana/grafana
    restart_policy: unless-stopped
    hostname: grafana
    volumes:
    - grafana-data:/var/lib/grafana
    - grafana-plugins:/var/lib/grafana/plugins
    networks:
    - name: netdata
    - name: web
    ports:
    - 3000:3000
    labels:
      traefik.enable: 'true'
      traefik.docker.network: web
      traefik.http.routers.grafana.entryPoints: web
      traefik.http.routers.grafana.rule: host(`{{ grafana_dns }}`)
      #traefik.http.routers.grafana.middlewares: redirect-to-https
      #traefik.http.middlewares.grafana.redirectscheme: https
      traefik.http.routers.grafana-ssl.entryPoints: websecure
      traefik.http.routers.grafana-ssl.rule: host(`{{ grafana_dns }}`)
      traefik.http.routers.grafana-ssl.tls: 'true'
      traefik.http.routers.grafana-ssl.tls.certResolver: leresolver
      traefik.http.routers.grafana-ssl.service: grafana-ssl
      traefik.http.services.grafana-ssl.loadBalancer.server.port: '3000'
      traefik.http.routers.grafana-ssl.middlewares: authtraefik
    env:
      #GF_SECURITY_ADMIN_PASSWORD: '{{ grafana_password }}'
      GF_SERVER_DOMAIN: '{{ grafana_dns }}'
      GF_AUTH_BASIC_ENABLED: 'false'
      GF_AUTH_DISABLE_LOGIN_FORM: 'true'
      GF_AUTH_ANONYMOUS_ENABLED: 'true'
      GF_SERVER_ROOT_URL: 'https://{{ grafana_dns }}'

- include_role: name=yourlabs.remember tasks_from=success
